(* skip-whitespace *)
Shader File = { Shader Definition }, End of Input;

Shader Definition = "shader", Name, "{", { Definition Statement }, "}";

Definition Statement = Options Block | Field Definition | Function Definition;


Options Block = "options", "{", { Option Statement }, "}";

Option Statement = Name, { Value }, ";";

Attribute List = "[", Attribute, { ",", Attribute }, "]";
Attribute = Name, [ "(", [ Value, { ",", Value } ], ")" ];

Field Definition = { Attribute List }, ( Input Definition | Varying Definition | Uniform Definition | Output Definition ), ";";

Input Definition   = "in",      Type Name, Name;
Varying Definition = "varying", Type Name, Name;
Uniform Definition = "uniform", Type Name, Name;
Output Definition  = "out",     Type Name, Name;

Function Definition = { Attribute List }, Type Name, Name, "(", Parameter List, ")", Function Body;

Parameter List = [ Parameter Definition, { ",", Parameter Definition } ];

Parameter Definition = Type Name, Name;

Function Body = "{", { Function Statement }, "}";
Function Statement = ? /[^;{}]+/ ?, ( Function Body | ";" );

(* collapse *)
End of Input = ? /$/ ?;

(* match-whitespace *)
Type Name = Void Type
          | Scalar Type
          | Vector Type
          | Sampler Type;

Void Type = "void";

Scalar Type = Bool Type
            | Int Type
            | Unsigned Int Type
            | Float Type
            | Double Type;

Bool Type         = "bool";
Int Type          = "int";
Unsigned Int Type = "uint";
Float Type        = "float";
Double Type       = "double";

Vector Type = Vector Prefix, Vector Postfix;

Vector Prefix = Bool Vector Prefix
              | Int Vector Prefix
              | Unsigned Int Vector Prefix
              | Float Vector Prefix
              | Double Vector Prefix;

Bool Vector Prefix         = "bvec";
Int Vector Prefix          = "ivec";
Unsigned Int Vector Prefix = "uvec";
Float Vector Prefix        = "vec";
Double Vector Prefix       = "dvec";

Vector Postfix = Vector2 Postfix
               | Vector3 Postfix
               | Vector4 Postfix;

Vector2 Postfix = "2";
Vector3 Postfix = "3";
Vector4 Postfix = "4";

(* match-whitespace *)
Sampler Type = Sampler Prefix, Sampler Postfix;

Sampler Prefix = Float Sampler Prefix
               | Int Sampler Prefix
               | Unsigned Int Sampler Prefix;

Float Sampler Prefix        = "sampler";
Int Sampler Prefix          = "isampler";
Unsigned Int Sampler Prefix = "usampler";

Sampler Postfix = ( ( Sampler1D | Sampler2D | SamplerCube | Sampler2DMS ), [ SamplerArray Postfix ] )
                | ( Sampler3D | Sampler2DRect );

Sampler1D      = "1D";
Sampler2D      = "2D";
Sampler3D      = "3D";
SamplerCube    = "Cube";
Sampler2DMS   = "2DMS";
Sampler2DRect = "2DRect";
SamplerArray Postfix = "Array";

Value = String
      | Integer
      | Decimal
      | Name;

(* collapse *)
Name = ? /[A-Z_][A-Z0-9_]*/i ?;

(* match-whitespace *)
String = "\"", Double Quoted String, "\"" | "'", Single Quoted String, "'";

(* omit-from-hierarchy *)
Double Quoted String = { Double Quoted Character | ( "\\", Escaped Character ) };

(* omit-from-hierarchy *)
Single Quoted String = { Double Quoted Character | ( "\\", Escaped Character ) };

(* collapse *)
Double Quoted Character = ? /[^"\\]/ ?;

(* collapse *)
Single Quoted Character = ? /[^'\\]/ ?;

(* collapse *)
Escaped Character = "\\" | "\"" | "'" | "n" | "t" | "r";

(* collapse *)
Integer = ? /[0-9]+/ ?;

(* collapse *)
Decimal = ? /[0-9]*\.[0-9]+?/ ?;
