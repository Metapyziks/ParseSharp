(* skip-whitespace *)
Lua File = Chunk, End of Input;

Chunk = { Statement, [ ";" ] }, [ Last Statement, [ ";" ] ];

Block = Chunk;

Statement = Variable List, "=", Expression List
          | Function Call
          | "do", Block, "end"
          | "while", Expression, "do", Block, "end"
          | "repeat", Block, "until", Expression
          | "if", Expression, "then", Block, { "elseif", Expression, "then", Block }, [ "else", Block ], "end"
          | "for", Name, "=", Expression, ",", Expression, [ ",", Expression ], "do", Block, "end"
          | "for", Name List, "in", Expression List, "do", Block, "end"
          | "function", Function Name, Function Body
          | "local", "function", Name, Function Body
          | "local", Name List, [ "=", Expression List ];

Last Statement = "return", [ Expression List ] | "break";

Function Name = Name, { ".", Name }, [ ":", Name ];

Variable List = Variable, { ",", Variable };

Variable = Prefix Expression, "[", Expression, "]" | Prefix Expression, ".", Name | Name;

Name List = Name, { ",", Name };

Expression List = Expression, { ",", Expression };

Expression = "nil" | "false" | "true" | Number | String | "..." | Function | Prefix Expression
           | Table Constructor | Expression, Binary Operator, Expression | Unary Operator, Expression;

Prefix Expression = Variable | Function Call | "(", Expression, ")";

Function Call = Prefix Expression, [ ":", Name ], Arguments;

Arguments = "(", Expression List, ")" | Table Constructor | String;

Function = "function", Function Body;

Function Body = "(", Parameter List, ")", Block, "end";

Parameter List = Name List, [ ",", "..." ] | "...";

Table Constructor = "{", Field List, "}";

Field List = Field, { Field Separator, Field }, [ Field Separator ];

Field = [ ( "[", Expression, "]" | Name ), "=" ], Expression;

Field Separator = "," | ";";

Binary Operator = "+" | "-" | "*" | "/" | "^" | "%" | ".." | "<" | "<=" | ">" | ">=" | "==" | "~=" | "and" | "or";

Unary Operator = "-" | "not" | "#";

(* collapse *)
Name = ? /[A-Z_][A-Z0-9_]*/i ?;

(* match-whitespace *)
String = "\"", Quoted String, "\"";

(* omit-from-hierarchy *)
Quoted String = { Quoted Character | ( "\\", Escaped Character ) };

(* collapse *)
Quoted Character = ? /[^""\\]/ ?;

(* collapse *)
Escaped Character = "\\" | "\"" | "n" | "t" | "r";

(* collapse *)
Number = ? /[0-9]+(\.[0-9]+)?/ ?;

(* collapse *)
End of Input = ? /$/ ?;
